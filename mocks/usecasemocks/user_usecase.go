// Code generated by mockery v2.43.1. DO NOT EDIT.

package usecasemocks

import (
	context "context"
	apperror "task_mission/apperror"

	mock "github.com/stretchr/testify/mock"

	models "task_mission/entities/models"

	requests "task_mission/entities/dtos/requests"

	responses "task_mission/entities/dtos/responses"
)

// IUserUsecase is an autogenerated mock type for the IUserUsecase type
type IUserUsecase struct {
	mock.Mock
}

// LoginUser provides a mock function with given fields: ctx, login
func (_m *IUserUsecase) LoginUser(ctx context.Context, login *requests.UserLoginRequest) (*responses.UserLoginResponse, *apperror.CustomError) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 *responses.UserLoginResponse
	var r1 *apperror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, *requests.UserLoginRequest) (*responses.UserLoginResponse, *apperror.CustomError)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *requests.UserLoginRequest) *responses.UserLoginResponse); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.UserLoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *requests.UserLoginRequest) *apperror.CustomError); ok {
		r1 = rf(ctx, login)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperror.CustomError)
		}
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, register
func (_m *IUserUsecase) RegisterUser(ctx context.Context, register *requests.UserRegisterRequest) (*models.User, *apperror.CustomError) {
	ret := _m.Called(ctx, register)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *models.User
	var r1 *apperror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, *requests.UserRegisterRequest) (*models.User, *apperror.CustomError)); ok {
		return rf(ctx, register)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *requests.UserRegisterRequest) *models.User); ok {
		r0 = rf(ctx, register)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *requests.UserRegisterRequest) *apperror.CustomError); ok {
		r1 = rf(ctx, register)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperror.CustomError)
		}
	}

	return r0, r1
}

// NewIUserUsecase creates a new instance of IUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserUsecase {
	mock := &IUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
